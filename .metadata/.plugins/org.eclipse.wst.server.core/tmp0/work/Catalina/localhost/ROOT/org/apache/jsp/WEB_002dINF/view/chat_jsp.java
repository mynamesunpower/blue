/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.40
 * Generated at: 2021-03-01 12:27:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Web Socket Example</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 채팅 영역 -->\r\n");
      out.write("\t<form>\r\n");
      out.write("\t\t<!-- 텍스트 박스에 채팅의 내용을 작성한다. -->\r\n");
      out.write("\t\t<input id=\"textMessage\" type=\"text\" onkeydown=\"return enter()\">\r\n");
      out.write("\t\t<!-- 서버로 메시지를 전송하는 버튼 -->\r\n");
      out.write("\t\t<input onclick=\"sendMessage()\" value=\"Send\" type=\"button\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<!-- 서버와 메시지를 주고 받는 콘솔 텍스트 영역 -->\r\n");
      out.write("\t<textarea id=\"messageTextArea\" rows=\"10\" cols=\"50\" disabled=\"disabled\"></textarea>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t// 서버의 broadsocket의 서블릿으로 웹 소켓을 한다.\r\n");
      out.write("\t\tvar webSocket = new WebSocket(\r\n");
      out.write("\t\t\t\t\"ws://175.210.170.183:8080/broadsocket\");\r\n");
      out.write("\t\t// 콘솔 텍스트 영역\r\n");
      out.write("\t\tvar messageTextArea = document.getElementById(\"messageTextArea\");\r\n");
      out.write("\t\t// 접속이 완료되면\r\n");
      out.write("\t\twebSocket.onopen = function(message) {\r\n");
      out.write("\t\t\t// 콘솔에 메시지를 남긴다.\r\n");
      out.write("\t\t\tmessageTextArea.value += \"Server connect...\\n\";\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// 접속이 끝기는 경우는 브라우저를 닫는 경우이기 떄문에 이 이벤트는 의미가 없음.\r\n");
      out.write("\t\twebSocket.onclose = function(message) {\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// 에러가 발생하면\r\n");
      out.write("\t\twebSocket.onerror = function(message) {\r\n");
      out.write("\t\t\t// 콘솔에 메시지를 남긴다.\r\n");
      out.write("\t\t\tmessageTextArea.value += \"error...\\n\";\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// 서버로부터 메시지가 도착하면 콘솔 화면에 메시지를 남긴다.\r\n");
      out.write("\t\twebSocket.onmessage = function(message) {\r\n");
      out.write("\t\t\tmessageTextArea.value += \"(operator) => \" + message.data + \"\\n\";\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// 서버로 메시지를 발송하는 함수\r\n");
      out.write("\t\t// Send 버튼을 누르거나 텍스트 박스에서 엔터를 치면 실행\r\n");
      out.write("\t\tfunction sendMessage() {\r\n");
      out.write("\t\t\t// 텍스트 박스의 객체를 가져옴\r\n");
      out.write("\t\t\tlet message = document.getElementById(\"textMessage\");\r\n");
      out.write("\t\t\t// 콘솔에 메세지를 남긴다.\r\n");
      out.write("\t\t\tmessageTextArea.value += \"(me) => \" + message.value + \"\\n\";\r\n");
      out.write("\t\t\t// 소켓으로 보낸다.\r\n");
      out.write("\t\t\twebSocket.send(message.value);\r\n");
      out.write("\t\t\t// 텍스트 박스 추기화\r\n");
      out.write("\t\t\tmessage.value = \"\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 텍스트 박스에서 엔터를 누르면\r\n");
      out.write("\t\tfunction enter() {\r\n");
      out.write("\t\t\t// keyCode 13은 엔터이다.\r\n");
      out.write("\t\t\tif (event.keyCode === 13) {\r\n");
      out.write("\t\t\t\t// 서버로 메시지 전송\r\n");
      out.write("\t\t\t\tsendMessage();\r\n");
      out.write("\t\t\t\t// form에 의해 자동 submit을 막는다.\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
