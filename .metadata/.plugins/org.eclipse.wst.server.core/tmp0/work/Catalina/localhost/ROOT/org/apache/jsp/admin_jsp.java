/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.40
 * Generated at: 2021-03-01 12:16:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class admin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Web Socket Example</title>\r\n");
      out.write("<style>\r\n");
      out.write("/* 여러 채팅창 간의 간격과 배열 위치*/\r\n");
      out.write(".float-left {\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("\tmargin: 5px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 유저가 접속할 때마다 이 템플릿으로 채팅창을 생성한다. -->\r\n");
      out.write("\t<div class=\"template\" style=\"display: none\">\r\n");
      out.write("\t\t<form>\r\n");
      out.write("\t\t\t<!-- 메시지 텍스트 박스 -->\r\n");
      out.write("\t\t\t<input type=\"text\" class=\"message\"\r\n");
      out.write("\t\t\t\tonkeydown=\"if(event.keyCode === 13) return false;\">\r\n");
      out.write("\t\t\t<!-- 전송 버튼 -->\r\n");
      out.write("\t\t\t<input value=\"Send\" type=\"button\" class=\"sendBtn\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<!-- 서버와 메시지를 주고 받는 콘솔 텍스트 영역 -->\r\n");
      out.write("\t\t<textarea rows=\"10\" cols=\"50\" class=\"console\" disabled=\"disabled\"></textarea>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!-- 소스를 간단하게 하기 위하 Jquery를 사용했습니다. -->\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t// 서버의 admin의 서블릿으로 웹 소켓을 한다.\r\n");
      out.write("\t\tvar webSocket = new WebSocket(\"ws://localhost:8080/admin.jsp\");\r\n");
      out.write("\t\t// 운영자에서의 open, close, error는 의미가 없어서 형태만 선언\r\n");
      out.write("\t\twebSocket.onopen = function(message) {\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\twebSocket.onclose = function(message) {\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\twebSocket.onerror = function(message) {\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// 서버로 부터 메시지가 오면\r\n");
      out.write("\t\twebSocket.onmessage = function(message) {\r\n");
      out.write("\t\t\t// 메시지의 구조는 JSON 형태로 만들었다.\r\n");
      out.write("\t\t\tlet node = JSON.parse(message.data);\r\n");
      out.write("\t\t\t// 메시지의 status는 유저의 접속 형태이다.\r\n");
      out.write("\t\t\t// visit은 유저가 접속했을 때 알리는 메시지다.\r\n");
      out.write("\t\t\tif (node.status === \"visit\") {\r\n");
      out.write("\t\t\t\t// 위 템플릿 div를 취득한다.\r\n");
      out.write("\t\t\t\tlet form = $(\".template\").html();\r\n");
      out.write("\t\t\t\t// div를 감싸고 속성 data-key에 unique키를 넣는다.\r\n");
      out.write("\t\t\t\tform = $(\"<div class='float-left'></div>\").attr(\"data-key\",\r\n");
      out.write("\t\t\t\t\t\tnode.key).append(form);\r\n");
      out.write("\t\t\t\t// body에 추가한다.\r\n");
      out.write("\t\t\t\t$(\"body\").append(form);\r\n");
      out.write("\t\t\t\t// message는 유저가 메시지를 보낼 때 알려주는 메시지이다.\r\n");
      out.write("\t\t\t} else if (node.status === \"message\") {\r\n");
      out.write("\t\t\t\t// key로 해당 div영역을 찾는다.\r\n");
      out.write("\t\t\t\tlet $div = $(\"[data-key='\" + node.key + \"']\");\r\n");
      out.write("\t\t\t\t// console영역을 찾는다.\r\n");
      out.write("\t\t\t\tlet log = $div.find(\".console\").val();\r\n");
      out.write("\t\t\t\t// 아래에 메시지를 추가한다.\r\n");
      out.write("\t\t\t\t$div.find(\".console\").val(\r\n");
      out.write("\t\t\t\t\t\tlog + \"(user) => \" + node.message + \"\\n\");\r\n");
      out.write("\t\t\t\t// bye는 유저가 접속을 끊었을 때 알려주는 메시지이다.\r\n");
      out.write("\t\t\t} else if (node.status === \"bye\") {\r\n");
      out.write("\t\t\t\t// 해당 키로 div를 찾아서 dom을 제거한다.\r\n");
      out.write("\t\t\t\t$(\"[data-key='\" + node.key + \"']\").remove();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// 전송 버튼을 클릭하면 발생하는 이벤트\r\n");
      out.write("\t\t$(document).on(\"click\", \".sendBtn\", function() {\r\n");
      out.write("\t\t\t// div 태그를 찾는다.\r\n");
      out.write("\t\t\tlet $div = $(this).closest(\".float-left\");\r\n");
      out.write("\t\t\t// 메시지 텍스트 박스를 찾아서 값을 취득한다.\r\n");
      out.write("\t\t\tlet message = $div.find(\".message\").val();\r\n");
      out.write("\t\t\t// 유저 key를 취득한다.\r\n");
      out.write("\t\t\tlet key = $div.data(\"key\");\r\n");
      out.write("\t\t\t// console영역을 찾는다.\r\n");
      out.write("\t\t\tlet log = $div.find(\".console\").val();\r\n");
      out.write("\t\t\t// 아래에 메시지를 추가한다.\r\n");
      out.write("\t\t\t$div.find(\".console\").val(log + \"(me) => \" + message + \"\\n\");\r\n");
      out.write("\t\t\t// 텍스트 박스의 값을 초기화 한다.\r\n");
      out.write("\t\t\t$div.find(\".message\").val(\"\");\r\n");
      out.write("\t\t\t// 웹소켓으로 메시지를 보낸다.\r\n");
      out.write("\t\t\twebSocket.send(key + \"#####\" + message);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t// 텍스트 박스에서 엔터키를 누르면\r\n");
      out.write("\t\t$(document).on(\r\n");
      out.write("\t\t\t\t\"keydown\",\r\n");
      out.write("\t\t\t\t\".message\",\r\n");
      out.write("\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\t// keyCode 13은 엔터이다.\r\n");
      out.write("\t\t\t\t\tif (event.keyCode === 13) {\r\n");
      out.write("\t\t\t\t\t\t// 버튼을 클릭하는 트리거를 발생한다.\r\n");
      out.write("\t\t\t\t\t\t$(this).closest(\".float-left\").find(\".sendBtn\")\r\n");
      out.write("\t\t\t\t\t\t\t\t.trigger(\"click\");\r\n");
      out.write("\t\t\t\t\t\t// form에 의해 자동 submit을 막는다.\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\treturn true;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
